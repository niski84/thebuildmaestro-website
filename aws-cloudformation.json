{
	"AWSTemplateFormatVersion" : "2010-09-09",
	"Description" : "Sets up the infrastructure for the thebuildmaestro.com website. Since CloudFormation doesn't support AWS Certificate Manager yet, the cert is requested manually in the US East region (the only supported region for ACM with CloudFront). Also, CloudFormation does not yet support ACM for CloudFront, so that is created manually for now (instead of using lambda hacks, since it ought to be supported at some point). See https://forums.aws.amazon.com/thread.jspa?messageID=708084",

	"Parameters": {
		"DomainName": {
			"Description": "Domain name of the website",
			"Type": "String",
			"Default": "thebuildmaestro.com"
		},
		"Region": {
			"Description": "AWS Region",
			"Type": "String",
			"Default": "ap-southeast-2",
			"AllowedValues": ["ap-southeast-2"]
		},
		"GitRepo": {
			"Description": "HTTP git repo with python website code",
			"Type": "String",
			"Default": "https://github.com/niski84/thebuildmaestro-website.git"
		},
		"NotificationEmail" : {
			"Description": "Email address to use to notify of successful or failed deployments",
			"Type": "String",
			"Default": "nick@thebuildmaestro.com"
		},
		"CloudFrontDomainName": {
			"Description": "Temporarily used until CloudFormation supports ACM with CloudFront",
			"Type":"String",
			"Default": "d2raumfhq8e7xn.cloudfront"
		},
		"CloudFrontDomainNameWWW": {
			"Description": "Temporarily used until CloudFormation supports ACM with CloudFront",
			"Type":"String",
			"Default": "d2raumfhq8e7xn.cloudfront"
		}
	},



	"Mappings": {
		"AWSRegion2AMI" : {
			"ap-southeast-2" : { "AMI" : "ami-dc361ebf" }
		}
	},



	"Resources": {
		"S3Website": {
			"Type": "AWS::S3::Bucket",
			"Metadata": {
				"Comment": "This is the bucket that holds the actual website contents"
			},
			"DeletionPolicy" : "Retain",
			"Properties" : {
				"BucketName": {"Ref":"DomainName"},
				"AccessControl": "PublicRead",
				"WebsiteConfiguration": {
					"IndexDocument": "index.html",
					"ErrorDocument": "404/index.html"
				}
			}
		},


		"S3WebsitePolicyV01": {
			"Type": "AWS::S3::BucketPolicy",
			"Metadata": {
				"Comment": "Allow anonymous public reads to the bucket. Bucket Policies cannot be updated in cloudformation, hence the V0x in the name"
			},
			"Properties" : {
				"Bucket": {"Ref":"S3Website"},
				"PolicyDocument": {
					"Statement":[{
						"Sid":"PublicReadGetObject",
						"Effect":"Allow",
						"Principal": "*",
						"Action":["s3:GetObject"],
						"Resource":{ "Fn::Join": ["", [ "arn:aws:s3:::", {"Ref":"S3Website"}, "/*"]]}
					}]
				}
			}
		},


		"S3WebsiteWWW": {
			"Type": "AWS::S3::Bucket",
			"Metadata": {
				"Comment": "Redirect requests from www.domain.com to domain.com"
			},
			"DeletionPolicy" : "Retain",
			"Properties" : {
				"BucketName": {"Fn::Join": ["", ["www.", {"Ref":"DomainName"} ]] } ,
				"AccessControl": "PublicRead",
				"WebsiteConfiguration": {
					"RedirectAllRequestsTo": { "HostName": {"Ref":"S3Website"} }
				}
			}
		},


		"DeploymentNotification": {
			"Type": "AWS::SNS::Topic",
			"Properties": {
				"DisplayName": {"Fn::Join": ["", [ {"Ref":"DomainName"}, " deployer"]]},
				"TopicName": "DeploymentNotification",
				"Subscription" : [{
					"Endpoint": {"Ref":"NotificationEmail"},
					"Protocol": "email"
				}]
			}
		},


		"S3WebsiteLogsBucket": {
			"Type": "AWS::S3::Bucket",
			"Metadata": {
				"Comment": "This bucket stores the CloudFront access logs"
			},
			"DeletionPolicy" : "Retain",
			"Properties" : {
				"BucketName": { "Fn::Join": ["", [ {"Ref":"DomainName"}, "-access-logs" ] ]},
				"AccessControl": "LogDeliveryWrite"
			}
		},


		"Route53Records": {
			"Type": "AWS::Route53::RecordSetGroup",
			"Properties": {
				"Comment": "DNS entries for the website",
				"HostedZoneName": { "Fn::Join": ["", [{"Ref":"DomainName"}, "."]] },
				"RecordSets": [
					{
						"Name": { "Fn::Join": ["", [{"Ref":"DomainName"}, "."]] },
						"Type": "A",
						"AliasTarget": {
							"DNSName": {"Ref":"CloudFrontDomainName"},
							"HostedZoneId": "EF1LNIY4CUELZ"
						}
					},
					{
						"Name": { "Fn::Join": ["", ["www.", {"Ref":"DomainName"}, "."]] },
						"Type": "A",
						"AliasTarget": {
							"DNSName": {"Ref":"CloudFrontDomainNameWWW"},
							"HostedZoneId": "EF1LNIY4CUELZ"
						}
					}
				]
			}
		},


		"SiteDeployerInstanceAccessRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"Path": "/",
				"AssumeRolePolicyDocument": {
					"Statement": [ {
						"Effect" : "Allow",
						"Principal" : {
							"Service" : [ "ec2.amazonaws.com" ]
						},
						"Action" : [ "sts:AssumeRole" ]
					} ]
				},
				"Policies": [
					{
						"PolicyName": "S3WebsiteWriteAccess",
						"PolicyDocument": {
							"Version" : "2012-10-17",
							"Statement": [ {
								"Effect": "Allow",
								"Action": "s3:*",
								"Resource": [
									{"Fn::Join": ["", ["arn:aws:s3:::", {"Ref":"DomainName"}, "/*"] ] }
								]
							} ]
						}
					},
					{
						"PolicyName": "SNSPublish",
						"PolicyDocument": {
							"Version" : "2012-10-17",
							"Statement": [ {
								"Effect": "Allow",
								"Action": [
									"sns:Publish",
									"sns:ListTopics"
								],
								"Resource": [
									{"Ref":"DeploymentNotification"}
								]
							} ]
						}
					}
				]
			}
		},
		"SiteDeployerLambdaAccessRole": {
			"Type": "AWS::IAM::Role",
			"DependsOn": "SiteDeployerInstanceAccessRole",
			"Properties": {
				"Path": "/",
				"AssumeRolePolicyDocument": {
					"Statement": [ {
						"Effect" : "Allow",
						"Principal" : {
							"Service" : [ "lambda.amazonaws.com" ]
						},
						"Action" : [ "sts:AssumeRole" ]
					} ]
				},
				"Policies": [
					{
						"PolicyName": "EC2StartAndTerminate",
						"PolicyDocument": {
							"Version" : "2012-10-17",
							"Statement": [ {
								"Effect": "Allow",
								"Action": [
									"ec2:CreateTags",
									"ec2:RunInstances",
									"ec2:DescribeInstances",
									"ec2:TerminateInstances",
									"ec2:StartInstances"
								],
								"Resource": [
									"*"
								]
							} ]
						}
					},
					{
						"PolicyName": "AllowInstanceProfile",
						"PolicyDocument": {
							"Version" : "2012-10-17",
							"Statement": [ {
								"Effect": "Allow",
								"Action": [
									"iam:PassRole"
								],
								"Resource": [
									{"Fn::GetAtt": ["SiteDeployerInstanceAccessRole", "Arn"] }
								]
							} ]
						}
					},
					{
						"PolicyName": "SNSPublish",
						"PolicyDocument": {
							"Version" : "2012-10-17",
							"Statement": [ {
								"Effect": "Allow",
								"Action": [
									"sns:Publish",
									"sns:ListTopics"
								],
								"Resource": [
									{"Ref":"DeploymentNotification"}
								]
							} ]
						}
					}
				]
			}
		},
		"SiteDeployerInstanceProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"DependsOn": [ "SiteDeployerInstanceAccessRole" ],
			"Properties": {
				"Roles": [
					{"Ref":"SiteDeployerInstanceAccessRole"}
				]
			}
		},

		"SiteDeployerLamda": {
			"Type": "AWS::Lambda::Function",
			"DependsOn": [
				"SiteDeployerLambdaAccessRole",
				"DeploymentNotification"
			],
			"Properties": {
				"Code": {
					"ZipFile": { "Fn::Join": ["", [
						"def deploy(event, context):\n",
						"    try: \n",
						"        if event['Records'][0]['Sns']['MessageAttributes']['X-Github-Event']['Value'] != 'push': \n",
						"            return \n",
						"    except:  \n",
						"        return  \n",
						"\n",
						"\n",
						"    import boto3\n",
						"    import traceback\n",
						"    import sys\n",
						"    sns = boto3.resource('sns')\n",
						"    topic = sns.Topic('",{"Ref":"DeploymentNotification"},"')\n",
						"    ec2 = boto3.resource('ec2', region_name='", {"Ref":"AWS::Region"}, "')\n",
						"",
						"    script = \"\"\"#!/bin/bash\n",
						"echo 'Output from deployment:' >> /tmp/deployment_output \n",
						"function sendMessage() { \n",
						"    subject=\"$1\" \n",
						"    aws --region ", {"Ref":"AWS::Region"} ," sns publish --topic-arn '",{"Ref":"DeploymentNotification"},"' --subject \"$subject\" --message file:///tmp/deployment_output \n",
						"} \n",
						" \n",
						"function deploymentFail() { \n",
						"    sendMessage 'Deployment failed' \n",
						"    shutdown -h now \n",
						"} \n",
						"trap deploymentFail EXIT \n",
						"set -e \n",
						"{ \n",
						"    yum -y install nodejs npm git --enablerepo=epel \n",
						"    mkdir /tmp/build\n",
						"    cd /tmp/build\n",
						"    git clone https://github.com/niski84/thebuildmaestro-website.git\n",
						"    cd * \n",
						"    pip install -r requirements.txt --user \n",
						"    npm install --silient\n",
						"    ./node_modules/.bin/grunt \n",
						"    ls -l build/index.html # sanity check \n",
						"    echo 'Running sync:' \n",
						"    aws s3 sync --cache-control max-age=86400 --metadata-directive REPLACE --delete --region ",{"Ref":"AWS::Region"}," build/ s3://",{"Ref":"DomainName"},"/ \n",
						"     \n",
						"     \n",
						"} >> /tmp/deployment_output 2>&1 \n",
						" \n",
						"sendMessage 'Deployment successful!' \n",
						"trap '' EXIT \n",
						"set +e \n",
						"shutdown -h now \n",
						" \n",
						" \n",
						" \n",
						" \n",
						"\"\"\"\n",
						"    try:\n",
						"        deployer = ec2.create_instances(ImageId='",{"Fn::FindInMap":["AWSRegion2AMI",{"Ref":"AWS::Region"},"AMI"]},"',",
						"InstanceInitiatedShutdownBehavior='terminate', ",
						"IamInstanceProfile={'Arn': '",{"Fn::GetAtt":["SiteDeployerInstanceProfile","Arn"]},"'},",
						"UserData=script, ",
						"InstanceType='t2.micro',MinCount=1,MaxCount=1)\n",
						"        deployer[0].wait_until_running()\n",
						"        deployer[0].load()\n",
						"        deployer_id = deployer[0].id\n",
						"        ec2.create_tags(Resources=[deployer_id], Tags=[{'Key':'Name', 'Value':'WebsiteDeployer'}])  \n",
						"    except:\n",
						"        topic.publish(Message=traceback.format_exc(),Subject='Deployment Lambda failed') \n",
						"        sys.exit(1)\n",
						""
					]]}
				},
				"Description": "Lamda function is called by SNS which in turn is called by Git. This just starts an instance that does the deployment.",
				"FunctionName": "StartWebsiteDeploymentInstance",
				"Handler": "index.deploy",
				"Role": {"Fn::GetAtt": ["SiteDeployerLambdaAccessRole", "Arn"] },
				"Runtime": "python2.7",
				"Timeout": "300"
			}
		},


		"DeploymentTriggerTopic": {
			"Type": "AWS::SNS::Topic",
			"DependsOn": "SiteDeployerLamda",
			"Metadata": {
				"Comment": "This is an endpoint used by GitHub to trigger the deployment Lamda function"
			},
			"Properties": {
				"DisplayName": {"Fn::Join": ["", [ {"Ref":"DomainName"}, " trigger-deploy"]]},
				"TopicName": "TriggerWebsiteDeploy",
				"Subscription" : [{
					"Protocol": "lambda",
					"Endpoint": {"Fn::GetAtt":["SiteDeployerLamda","Arn"]}
				}]
			}
		},

		"GitHubDeployUser" : {
			"Type": "AWS::IAM::User",
			"DependsOn": "DeploymentNotification",
			"Metadata": {
				"Comment": "A user used by GitHub that only has permissions to publish to DeploymentTriggerTopic"
			},
			"Properties": {
				"Policies" : [{
						"PolicyName": "PublishToDeploymentTriggerTopic",
						"PolicyDocument": {
							"Version" : "2012-10-17",
							"Statement": [ {
								"Effect": "Allow",
								"Action": [
									"sns:Publish"
								],
								"Resource": [
									{"Ref":"DeploymentTriggerTopic"}
								]
							} ]
						}
				}]
			}
		},
		"GitHubDeployAccessKey" : {
			"Type": "AWS::IAM::AccessKey",
			"DependsOn": "GitHubDeployUser",
			"Properties": {
				"UserName": {"Ref":"GitHubDeployUser"}
			}
		},


		"DeploymentTriggerTopicLambdaPermission": {
			"Type": "AWS::Lambda::Permission",
			"Metadata": {
				"Comment": "Allow SNS to invoke the lambda function"
			},
			"DependsOn": "SiteDeployerLamda",
			"Properties": {
				"Action": "lambda:InvokeFunction",
				"FunctionName": {"Fn::GetAtt":["SiteDeployerLamda","Arn"]},
				"Principal": "sns.amazonaws.com",
				"SourceArn": {"Ref":"DeploymentTriggerTopic"}
			}
		}

	},



	"Outputs": {
		"S3WebsiteURL": {
			"Description": "The website URL for the S3 bucket",
			"Value": {"Fn::GetAtt":["S3Website","WebsiteURL"]}
		},
		"GitHubDeploymentAccessKey": {
			"Description": "The access key for the GitHub deployment",
			"Value": {"Ref":"GitHubDeployAccessKey"}
		},
		"GitHubDeploymentSecret": {
			"Description": "The secret key for the GitHub deployment",
			"Value": {"Fn::GetAtt": [ "GitHubDeployAccessKey", "SecretAccessKey" ] }
		},
		"GitHubDeploymentTopic": {
			"Description": "The SNS topic for the GitHub deployment",
			"Value": {"Ref":"DeploymentTriggerTopic"}
		}

	}


}
